"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
const eyes_sdk_core_1 = require("@applitools/eyes-sdk-core");
const spec = __importStar(require("./spec-driver"));
const api_1 = require("./api");
if (!process.env.APPLITOOLS_WEBDRIVERIO_MAJOR_VERSION) {
    try {
        const { version } = require('webdriverio/package.json');
        const [major] = version.split('.', 1);
        process.env.APPLITOOLS_WEBDRIVERIO_MAJOR_VERSION = major;
    }
    catch (_a) {
    }
}
const sdk = eyes_sdk_core_1.makeSDK({
    name: 'eyes-webdriverio-service',
    version: require('../package.json').version,
    spec,
    VisualGridClient: require('@applitools/visual-grid-client'),
});
class EyesOverride extends api_1.Eyes {
}
EyesOverride._spec = sdk;
module.exports = class EyesService {
    constructor(_a) {
        var { useVisualGrid, concurrency, eyes } = _a, config = __rest(_a, ["useVisualGrid", "concurrency", "eyes"]);
        const wdioMajorVersion = Number(process.env.APPLITOOLS_WEBDRIVERIO_MAJOR_VERSION);
        config = wdioMajorVersion < 6 ? Object.assign({}, eyes) : config;
        if (!useVisualGrid)
            config.hideScrollbars = true;
        this._eyes = new EyesOverride(useVisualGrid ? new api_1.VisualGridRunner({ testConcurrency: concurrency }) : new api_1.ClassicRunner(), config);
    }
    beforeSession(config) {
        this._appName = this._eyes.configuration.appName;
        if (config.enableEyesLogs) {
            this._eyes.configuration.logs = { type: 'console' };
        }
    }
    before() {
        browser.addCommand('getEyes', () => {
            return this._eyes;
        });
        browser.addCommand('eyesCheck', async (title, checkSettings = { fully: true }) => {
            await this._eyesOpen();
            return this._eyes.check(title, checkSettings);
        });
        browser.addCommand('eyesCheckWindow', async (...args) => {
            return browser.eyesCheck(...args);
        });
        browser.addCommand('eyesSetScrollRootElement', (element) => {
            this._eyes.getConfiguration().setScrollRootElement(element);
        });
        browser.addCommand('eyesAddProperty', (key, value) => {
            this._eyes.getConfiguration().addProperty(key, value);
        });
        browser.addCommand('eyesClearProperties', () => {
            this._eyes.getConfiguration().clearProperties();
        });
        browser.addCommand('eyesGetTestResults', async () => {
            await this._eyesClose();
            return this._testResults;
        });
        browser.addCommand('eyesSetConfiguration', (configuration) => {
            return this._eyes.setConfiguration(configuration);
        });
        browser.addCommand('eyesGetIsOpen', () => {
            return this._eyes.getIsOpen();
        });
        browser.addCommand('eyesGetConfiguration', () => {
            return this._eyes.getConfiguration();
        });
        browser.addCommand('eyesGetAllTestResults', async (throwErr) => {
            return this._eyes.runner.getAllTestResults(throwErr);
        });
    }
    beforeTest(test) {
        const configuration = this._eyes.getConfiguration();
        configuration.setTestName(test.title || test.description);
        if (!this._appName) {
            configuration.setAppName(test.parent || test.id);
        }
        if (!configuration.getViewportSize()) {
            configuration.setViewportSize({ width: 800, height: 600 });
        }
        this._eyes.setConfiguration(configuration);
    }
    afterTest() {
        this._eyes.getConfiguration().setScrollRootElement(null);
        browser.call(() => this._eyesClose());
    }
    after() {
        browser.call(() => this._eyes.runner.getAllTestResults(false));
        browser.call(() => this._eyes.abort());
    }
    async _eyesOpen() {
        if (!this._eyes.isOpen) {
            this._testResults = null;
            await this._eyes.open(browser);
        }
    }
    async _eyesClose() {
        if (this._eyes.isOpen) {
            this._testResults = await this._eyes.close(false);
        }
    }
};
