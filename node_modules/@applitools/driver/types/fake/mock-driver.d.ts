/// <reference types="node" />
export class MockDriver {
    constructor({ viewport, device, platform, browser, ua }?: {
        viewport?: {
            width: number;
            height: number;
        };
        device: any;
        platform: any;
        browser: any;
        ua: any;
    });
    _device: any;
    _platform: any;
    _browser: any;
    _ua: any;
    _window: {
        title: string;
        url: string;
        rect: {
            width: number;
            height: number;
            x: number;
            y: number;
        };
    };
    _methods: Map<any, any>;
    _scripts: Map<any, any>;
    _elements: Map<any, any>;
    _contexts: Map<any, any>;
    _contextId: any;
    mockScript(scriptMatcher: any, resultGenerator: any): void;
    mockElement(selector: any, state: any): any;
    mockElements(nodes: any, { parentId, parentContextId, parentRootId }?: {
        parentId?: any;
        parentContextId?: any;
        parentRootId?: any;
    }): void;
    mockSelector(selector: any, element: any): void;
    wrapMethod(name: any, wrapper: any): void;
    unwrapMethod(name: any): void;
    get info(): {
        isMobile: boolean;
        isNative: boolean;
        deviceName: any;
        platformName: any;
        platformVersion: any;
        browserName: any;
        browserVersion: any;
    };
    executeScript(script: any, args?: any[]): Promise<any>;
    findElement(selector: any, rootElement: any): Promise<any>;
    findElements(selector: any, rootElement: any): Promise<any>;
    switchToFrame(reference: any): Promise<MockDriver>;
    switchToParentFrame(): Promise<MockDriver>;
    getWindowRect(): Promise<{
        width: number;
        height: number;
        x: number;
        y: number;
    }>;
    setWindowRect(rect: any): Promise<void>;
    getUrl(): Promise<string>;
    getTitle(): Promise<string>;
    visit(url: any): Promise<void>;
    takeScreenshot(): Promise<void>;
    toString(): string;
    toJSON(): string;
    [inspect.custom](): string;
}
import { inspect } from "util";
