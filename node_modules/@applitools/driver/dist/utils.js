"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeSpecUtils = void 0;
const utils = __importStar(require("@applitools/utils"));
const snippets = require('@applitools/snippets');
function makeSpecUtils(spec) {
    return { isSelector, transformSelector, splitSelector, findRootElement };
    function isSelector(selector) {
        return (spec.isSelector(selector) ||
            utils.types.isString(selector) ||
            (utils.types.isPlainObject(selector) &&
                utils.types.has(selector, 'selector') &&
                (utils.types.isString(selector.selector) || spec.isSelector(selector.selector))));
    }
    function transformSelector(selector) {
        var _a, _b;
        return (_b = (_a = spec.transformSelector) === null || _a === void 0 ? void 0 : _a.call(spec, selector)) !== null && _b !== void 0 ? _b : selector;
    }
    function splitSelector(selector) {
        let current = selector;
        let active = {};
        const path = [active];
        while (utils.types.has(current, 'selector') &&
            (utils.types.has(current, 'frame') || utils.types.has(current, 'shadow'))) {
            active.selector = current.selector;
            if (current.type)
                active.type = current.type;
            if (current.frame) {
                active = {};
                path.push(active);
                current = current.frame;
            }
            else if (current.shadow) {
                active = active.shadow = {};
                current = current.shadow;
            }
        }
        if (spec.isSelector(current) || utils.types.isString(current)) {
            active.selector = current;
        }
        else {
            active.selector = current.selector;
            if (current.type)
                active.type = current.type;
        }
        return path;
    }
    async function findRootElement(context, selector) {
        let root = null;
        let currentSelector = selector;
        while (utils.types.has(currentSelector, ['selector', 'shadow']) && isSelector(currentSelector.shadow)) {
            const element = await spec.findElement(context, transformSelector(currentSelector), root);
            if (!element)
                break;
            root = await spec.executeScript(context, snippets.getShadowRoot, [element]);
            if (!root)
                break;
            currentSelector = currentSelector.shadow;
        }
        return { root, selector: currentSelector };
    }
}
exports.makeSpecUtils = makeSpecUtils;
