"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Element = void 0;
const utils = __importStar(require("@applitools/utils"));
const utils_1 = require("./utils");
const snippets = require('@applitools/snippets');
class Element {
    constructor(options) {
        var _a, _b, _c, _d, _e, _f;
        this._state = {};
        if (options.element instanceof Element)
            return options.element;
        this._spec = options.spec;
        this._utils = utils_1.makeSpecUtils(options.spec);
        if (options.context)
            this._context = options.context;
        if (options.logger)
            this._logger = options.logger;
        if (this._spec.isElement(options.element)) {
            this._target = (_c = (_b = (_a = this._spec).transformElement) === null || _b === void 0 ? void 0 : _b.call(_a, options.element)) !== null && _c !== void 0 ? _c : options.element;
            // Some frameworks contains information about the selector inside an element
            this._selector = (_d = options.selector) !== null && _d !== void 0 ? _d : (_f = (_e = this._spec).extractSelector) === null || _f === void 0 ? void 0 : _f.call(_e, options.element);
            this._index = options.index;
        }
        else if (this._utils.isSelector(options.selector)) {
            this._selector = options.selector;
        }
        else {
            throw new TypeError('Element constructor called with argument of unknown type!');
        }
    }
    get target() {
        return this._target;
    }
    get selector() {
        return this._selector;
    }
    get context() {
        return this._context;
    }
    get driver() {
        return this.context.driver;
    }
    get isRef() {
        return this.context.isRef || !this.target;
    }
    async equals(element) {
        if (this.isRef)
            return false;
        element = element instanceof Element ? element.target : element;
        if (this.driver.isWeb) {
            return this._spec
                .executeScript(this.context.target, snippets.isEqualElements, [this.target, element])
                .catch(() => false);
        }
        else {
            return this._spec.isEqualElements(this.context.target, this.target, element);
        }
    }
    async init(context) {
        this._context = context;
        this._logger = context._logger;
        if (this._target)
            return this;
        if (this._selector) {
            const element = await this._context.element(this._selector);
            if (!element)
                throw new Error(`Cannot find element with selector ${JSON.stringify(this._selector)}`);
            this._target = element.target;
            return this;
        }
    }
    async getRegion() {
        const region = await this.withRefresh(async () => {
            if (this.driver.isWeb) {
                this._logger.log('Extracting region of web element with selector', this.selector);
                return this.context.execute(snippets.getElementRect, [this, false]);
            }
            else {
                this._logger.log('Extracting region of native element with selector', this.selector);
                const region = await this._spec.getElementRegion(this.driver.target, this.target);
                this._logger.log('Extracted native region', region);
                return this.driver.normalizeRegion(region);
            }
        });
        this._logger.log('Extracted region', region);
        return region;
    }
    async getClientRegion() {
        const region = await this.withRefresh(async () => {
            if (this.driver.isWeb) {
                this._logger.log('Extracting region of web element with selector', this.selector);
                return this.context.execute(snippets.getElementRect, [this, true]);
            }
            else {
                this._logger.log('Extracting region of native element with selector', this.selector);
                const region = await this._spec.getElementRegion(this.driver.target, this.target);
                this._logger.log('Extracted native region', region);
                return this.driver.normalizeRegion(region);
            }
        });
        this._logger.log('Extracted client region', region);
        return region;
    }
    async getContentSize() {
        if (this._state.contentSize)
            return this._state.contentSize;
        const size = await this.withRefresh(async () => {
            var _a;
            if (this.driver.isWeb) {
                this._logger.log('Extracting content size of web element with selector', this.selector);
                return this.context.execute(snippets.getElementContentSize, [this]);
            }
            else {
                this._logger.log('Extracting content size of native element with selector', this.selector);
                try {
                    if (this.driver.isAndroid) {
                        const className = await this.getAttribute('className');
                        if ([
                            'android.widget.ListView',
                            'android.widget.GridView',
                            'android.support.v7.widget.RecyclerView',
                            // 'androidx.recyclerview.widget.RecyclerView',
                            'androidx.viewpager2.widget.ViewPager2',
                        ].includes(className)) {
                            this._logger.log('Trying to extract content size using android helper library');
                            const helperElement = await this.driver.element({
                                type: '-android uiautomator',
                                selector: 'new UiSelector().description("EyesAppiumHelper")',
                            });
                            if (helperElement) {
                                const elementRegion = await this._spec.getElementRegion(this.driver.target, this.target);
                                await helperElement.click();
                                const info = await this._spec.getElementText(this.driver.target, helperElement.target);
                                this._state.contentSize = utils.geometry.scale({ width: elementRegion.width, height: Number(info) }, 1 / this.driver.pixelRatio);
                            }
                            else {
                                this._logger.log('Helper library for android was not detected');
                            }
                        }
                    }
                    else if (this.driver.isIOS) {
                        const type = await this.getAttribute('type');
                        if (type === 'XCUIElementTypeScrollView') {
                            const elementRegion = await this._spec.getElementRegion(this.driver.target, this.target);
                            const [childElement] = await this.driver.elements({
                                type: 'xpath',
                                selector: '//XCUIElementTypeScrollView[1]/*', // We cannot be sure that our element is the first one
                            });
                            const childElementRegion = await this._spec.getElementRegion(this.driver.target, childElement.target);
                            this._state.contentSize = {
                                width: elementRegion.width,
                                height: childElementRegion.y + childElementRegion.height - elementRegion.y,
                            };
                        }
                        else if (type === 'XCUIElementTypeCollectionView') {
                            this._logger.log('Trying to extract content size using ios helper library');
                            const helperElement = await this.driver.element({
                                type: 'name',
                                selector: 'applitools_grab_scrollable_data_button',
                            });
                            if (helperElement) {
                                const helperElementRegion = await this._spec.getElementRegion(this.driver.target, helperElement.target);
                                await this._spec.performAction(this.driver.target, [
                                    { action: 'tap', x: helperElementRegion.x, y: helperElementRegion.y },
                                    { action: 'wait', ms: 1000 },
                                    { action: 'release' },
                                ]);
                                const infoElement = await this.driver.element({ type: 'name', selector: 'applitools_content_size_label' });
                                const info = await this._spec.getElementText(this.driver.target, infoElement.target);
                                if (info) {
                                    const [_, width, height] = info.match(/\{(\d+),\s?(\d+)\}/);
                                    this._state.contentSize = { width: Number(width), height: Number(height) };
                                }
                            }
                            else {
                                this._logger.log('Helper library for ios was not detected');
                            }
                        }
                    }
                    if (!this._state.contentSize) {
                        const data = JSON.parse(await this.getAttribute('contentSize'));
                        this._logger.log('Extracted native content size attribute', data);
                        this._state.contentSize = this.driver.isIOS
                            ? { width: data.width, height: data.scrollableOffset }
                            : utils.geometry.scale({ width: data.width, height: data.height + data.scrollableOffset }, 1 / this.driver.pixelRatio);
                        this._touchPadding = (_a = data.touchPadding) !== null && _a !== void 0 ? _a : this._touchPadding;
                    }
                    if (this.driver.isAndroid) {
                        this._logger.log('Stabilizing android scroll offset');
                        // android has a bug when after extracting 'contentSize' attribute the element is being scrolled by undetermined number of pixels
                        const originalScrollOffset = await this.getScrollOffset();
                        this._state.scrollOffset = { x: -1, y: -1 };
                        await this.scrollTo({ x: 0, y: 0 });
                        await this.scrollTo(originalScrollOffset);
                    }
                    return this._state.contentSize;
                }
                catch (err) {
                    this._logger.warn('Failed to extract content size, extracting client size instead');
                    this._logger.error(err);
                    return utils.geometry.size(await this.getClientRegion());
                }
            }
        });
        this._logger.log('Extracted content size', size);
        return size;
    }
    async isScrollable() {
        this._logger.log('Check is element with selector', this.selector, 'is scrollable');
        const isScrollable = await this.withRefresh(async () => {
            if (this.driver.isWeb) {
                return this.context.execute(snippets.isElementScrollable, [this]);
            }
            else if (this.driver.isAndroid) {
                const data = JSON.parse(await this.getAttribute('scrollable'));
                return Boolean(data) || false;
            }
            else if (this.driver.isIOS) {
                const type = await this.getAttribute('type');
                return ['XCUIElementTypeScrollView', 'XCUIElementTypeTable', 'XCUIElementTypeCollectionView'].includes(type);
            }
        });
        this._logger.log('Element is scrollable', isScrollable);
        return isScrollable;
    }
    async isRoot() {
        // TODO replace with snippet
        return this.withRefresh(async () => {
            if (this.driver.isWeb) {
                const rootElement = await this.context.element({ type: 'css', selector: 'html' });
                return this.equals(rootElement);
            }
            else {
                return false;
            }
        });
    }
    async getTouchPadding() {
        if (this._touchPadding == null) {
            if (this.driver.isWeb)
                this._touchPadding = 0;
            else if (this.driver.isIOS)
                this._touchPadding = 14;
            else if (this.driver.isAndroid) {
                const { touchPadding } = JSON.parse(await this.getAttribute('contentSize'));
                this._touchPadding = touchPadding !== null && touchPadding !== void 0 ? touchPadding : 0;
            }
        }
        return this._touchPadding;
    }
    async getAttribute(name) {
        if (this.driver.isWeb) {
            const properties = await this.context.execute(snippets.getElementProperties, [this, [name]]);
            return properties[name];
        }
        else {
            return this._spec.getElementAttribute(this.driver.target, this.target, name);
        }
    }
    async setAttribute(name, value) {
        if (this.driver.isWeb) {
            await this.context.execute(snippets.setElementAttributes, [this, { [name]: value }]);
        }
    }
    async scrollTo(offset) {
        return this.withRefresh(async () => {
            offset = { x: Math.round(offset.x), y: Math.round(offset.y) };
            if (this.driver.isWeb) {
                let actualOffset = await this.context.execute(snippets.scrollTo, [this, offset]);
                // iOS has an issue when scroll offset is read immediately after it is been set it will always return the exact value that was set
                if (this.driver.isIOS)
                    actualOffset = await this.getScrollOffset();
                return actualOffset;
            }
            else {
                const currentScrollOffset = await this.getScrollOffset();
                if (utils.geometry.equals(offset, currentScrollOffset))
                    return currentScrollOffset;
                const contentSize = await this.getContentSize();
                const scrollableRegion = await this._spec.getElementRegion(this.driver.target, this.target);
                const scaledScrollableRegion = this.driver.isAndroid
                    ? utils.geometry.scale(scrollableRegion, 1 / this.driver.pixelRatio)
                    : scrollableRegion;
                const maxOffset = {
                    x: Math.round(scaledScrollableRegion.width * (contentSize.width / scaledScrollableRegion.width - 1)),
                    y: Math.round(scaledScrollableRegion.height * (contentSize.height / scaledScrollableRegion.height - 1)),
                };
                let requiredOffset;
                let remainingOffset;
                if (offset.x === 0 && offset.y === 0) {
                    requiredOffset = offset;
                    remainingOffset = { x: -maxOffset.x, y: -maxOffset.y };
                }
                else {
                    requiredOffset = { x: Math.min(offset.x, maxOffset.x), y: Math.min(offset.y, maxOffset.y) };
                    remainingOffset = utils.geometry.offsetNegative(requiredOffset, currentScrollOffset);
                }
                if (this.driver.isAndroid) {
                    remainingOffset = utils.geometry.scale(remainingOffset, this.driver.pixelRatio);
                }
                const actions = [];
                const xPadding = Math.floor(scrollableRegion.width * 0.1);
                const yCenter = Math.floor(scrollableRegion.y + scrollableRegion.height / 2);
                const xLeft = scrollableRegion.y + xPadding;
                const xDirection = remainingOffset.y > 0 ? 'right' : 'left';
                let xRemaining = Math.abs(remainingOffset.x);
                while (xRemaining > 0) {
                    const xRight = scrollableRegion.x + Math.min(xRemaining + xPadding, scrollableRegion.width - xPadding);
                    const [xStart, xEnd] = xDirection === 'right' ? [xRight, xLeft] : [xLeft, xRight];
                    actions.push({ action: 'press', x: xStart, y: yCenter }, { action: 'wait', ms: 1500 }, { action: 'moveTo', x: xEnd, y: yCenter }, { action: 'release' });
                    xRemaining -= xRight - xLeft;
                }
                const yPadding = Math.floor(scrollableRegion.height * 0.1);
                const xCenter = Math.floor(scrollableRegion.x + scrollableRegion.width / 2); // 0
                const yTop = scrollableRegion.y + yPadding;
                const yDirection = remainingOffset.y > 0 ? 'down' : 'up';
                let yRemaining = Math.abs(remainingOffset.y) + (await this.getTouchPadding()) * 2;
                while (yRemaining > 0) {
                    const yBottom = scrollableRegion.y + Math.min(yRemaining + yPadding, scrollableRegion.height - yPadding);
                    const [yStart, yEnd] = yDirection === 'down' ? [yBottom, yTop] : [yTop, yBottom];
                    actions.push({ action: 'press', x: xCenter, y: yStart }, { action: 'wait', ms: 1500 }, { action: 'moveTo', x: xCenter, y: yEnd }, { action: 'wait', ms: 1500 }, { action: 'release' });
                    yRemaining -= yBottom - yTop;
                }
                if (actions.length > 0) {
                    await this._spec.performAction(this.driver.target, actions);
                }
                this._state.scrollOffset = requiredOffset;
                return this._state.scrollOffset;
            }
        });
    }
    async translateTo(offset) {
        offset = { x: Math.round(offset.x), y: Math.round(offset.y) };
        if (this.driver.isWeb) {
            return this.withRefresh(async () => this.context.execute(snippets.translateTo, [this, offset]));
        }
        else {
            throw new Error('Cannot apply css translate scrolling on non-web element');
        }
    }
    async getScrollOffset() {
        var _a;
        if (this.driver.isWeb) {
            return this.withRefresh(() => this.context.execute(snippets.getElementScrollOffset, [this]));
        }
        else {
            return (_a = this._state.scrollOffset) !== null && _a !== void 0 ? _a : { x: 0, y: 0 };
        }
    }
    async getTranslateOffset() {
        if (this.driver.isWeb) {
            return this.withRefresh(() => this.context.execute(snippets.getElementTranslateOffset, [this]));
        }
        else {
            throw new Error('Cannot apply css translate scrolling on non-web element');
        }
    }
    async getInnerOffset() {
        if (this.driver.isWeb) {
            return this.withRefresh(() => this.context.execute(snippets.getElementInnerOffset, [this]));
        }
        else {
            return this.getScrollOffset();
        }
    }
    async click() {
        await this._spec.click(this.context.target, this.target);
    }
    async preserveState() {
        if (this.driver.isNative)
            return;
        // TODO create single js snippet
        const scrollOffset = await this.getScrollOffset();
        const transforms = await this.context.execute(snippets.getElementStyleProperties, [
            this,
            ['transform', '-webkit-transform'],
        ]);
        if (!utils.types.has(this._state, ['scrollOffset', 'transforms'])) {
            this._state.scrollOffset = scrollOffset;
            this._state.transforms = transforms;
        }
        return { scrollOffset, transforms };
    }
    async restoreState(state = this._state) {
        if (this.driver.isNative)
            return;
        if (state.scrollOffset)
            await this.scrollTo(state.scrollOffset);
        if (state.transforms)
            await this.context.execute(snippets.setElementStyleProperties, [this, state.transforms]);
        if (state === this._state) {
            this._state.scrollOffset = null;
            this._state.transforms = null;
        }
    }
    async hideScrollbars() {
        if (this.driver.isNative)
            return;
        if (this._originalOverflow)
            return;
        return this.withRefresh(async () => {
            const { overflow } = await this.context.execute(snippets.setElementStyleProperties, [this, { overflow: 'hidden' }]);
            this._originalOverflow = overflow;
        });
    }
    async restoreScrollbars() {
        if (this.driver.isNative)
            return;
        if (!this._originalOverflow)
            return;
        return this.withRefresh(async () => {
            await this.context.execute(snippets.setElementStyleProperties, [this, { overflow: this._originalOverflow }]);
            this._originalOverflow = null;
        });
    }
    async refresh(freshElement) {
        if (this._spec.isElement(freshElement)) {
            this._target = freshElement;
            return true;
        }
        if (!this._selector)
            return false;
        const element = this._index > 0
            ? await this.context.elements(this._selector).then(elements => elements[this._index])
            : await this.context.element(this._selector);
        if (element) {
            this._target = element.target;
        }
        return Boolean(element);
    }
    async withRefresh(operation) {
        if (!this._spec.isStaleElementError)
            return operation();
        try {
            const result = await operation();
            // Some frameworks could handle stale element reference error by itself or doesn't throw an error
            if (this._spec.isStaleElementError(result, this.selector)) {
                await this.refresh();
                return operation();
            }
            return result;
        }
        catch (err) {
            if (this._spec.isStaleElementError(err)) {
                const refreshed = await this.refresh();
                if (refreshed)
                    return operation();
            }
            throw err;
        }
    }
    toJSON() {
        return this.target;
    }
}
exports.Element = Element;
