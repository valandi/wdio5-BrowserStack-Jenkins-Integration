"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestResultsSummaryData = void 0;
const utils = __importStar(require("@applitools/utils"));
const TestResultsStatus_1 = require("../enums/TestResultsStatus");
const TestFailedError_1 = require("../errors/TestFailedError");
const TestResultContainer_1 = require("./TestResultContainer");
class TestResultsSummaryData {
    /** @internal */
    constructor(results) {
        this._results = [];
        this._passed = 0;
        this._unresolved = 0;
        this._failed = 0;
        this._exceptions = 0;
        this._mismatches = 0;
        this._missing = 0;
        this._matches = 0;
        for (const result of results) {
            let container;
            if (utils.types.has(result, ['testResults', 'exception'])) {
                container = new TestResultContainer_1.TestResultContainerData(result);
            }
            else if (result instanceof TestFailedError_1.TestFailedError) {
                container = new TestResultContainer_1.TestResultContainerData({ testResults: result.testResults, exception: result });
            }
            else if (result instanceof Error) {
                container = new TestResultContainer_1.TestResultContainerData({ testResults: null, exception: result });
            }
            else {
                container = new TestResultContainer_1.TestResultContainerData({ testResults: result, exception: null });
            }
            this._results.push(container);
            if (container.exception)
                this._exceptions += 1;
            if (container.testResults) {
                if (container.testResults.status) {
                    if (container.testResults.status === TestResultsStatus_1.TestResultsStatusEnum.Failed)
                        this._failed += 1;
                    else if (container.testResults.status === TestResultsStatus_1.TestResultsStatusEnum.Passed)
                        this._passed += 1;
                    else if (container.testResults.status === TestResultsStatus_1.TestResultsStatusEnum.Unresolved)
                        this._unresolved += 1;
                }
                this._matches += container.testResults.matches;
                this._missing += container.testResults.missing;
                this._mismatches += container.testResults.mismatches;
            }
        }
    }
    getAllResults() {
        return this._results;
    }
    [Symbol.iterator]() {
        return this._results[Symbol.iterator]();
    }
    /** @internal */
    toObject() {
        return this._results;
    }
    /** @internal */
    toJSON() {
        return this._results.map(container => utils.general.toJSON(container));
    }
    /** @internal */
    toString() {
        return ('result summary {' +
            '\n\tpassed=' +
            this._passed +
            '\n\tunresolved=' +
            this._unresolved +
            '\n\tfailed=' +
            this._failed +
            '\n\texceptions=' +
            this._exceptions +
            '\n\tmismatches=' +
            this._mismatches +
            '\n\tmissing=' +
            this._missing +
            '\n\tmatches=' +
            this._matches +
            '\n}');
    }
}
exports.TestResultsSummaryData = TestResultsSummaryData;
